
44aBit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c1  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004cf  00000000  00000000  000009c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000303  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ab  00000000  00000000  000014fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	11 c0       	rjmp	.+34     	; 0x34 <__vector_8>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	69 d0       	rcall	.+210    	; 0x102 <main>
  30:	74 c0       	rjmp	.+232    	; 0x11a <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <__vector_8>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR(TIM1_OVF_vect)
{
  34:	1f 92       	push	r1
  36:	0f 92       	push	r0
  38:	0f b6       	in	r0, 0x3f	; 63
  3a:	0f 92       	push	r0
  3c:	11 24       	eor	r1, r1
  3e:	8f 93       	push	r24
  40:	9f 93       	push	r25
  42:	ef 93       	push	r30
  44:	ff 93       	push	r31
	PORTA=0xff;
  46:	8f ef       	ldi	r24, 0xFF	; 255
  48:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4a:	e7 e8       	ldi	r30, 0x87	; 135
  4c:	f3 e1       	ldi	r31, 0x13	; 19
  4e:	31 97       	sbiw	r30, 0x01	; 1
  50:	f1 f7       	brne	.-4      	; 0x4e <__SREG__+0xf>
  52:	00 c0       	rjmp	.+0      	; 0x54 <__SREG__+0x15>
  54:	00 00       	nop
	_delay_ms(20);
	PORTA=0;
  56:	1b ba       	out	0x1b, r1	; 27
  58:	e7 e8       	ldi	r30, 0x87	; 135
  5a:	f3 e1       	ldi	r31, 0x13	; 19
  5c:	31 97       	sbiw	r30, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <__SREG__+0x1d>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
	_delay_ms(20);
	PORTA=0xff;
  64:	8b bb       	out	0x1b, r24	; 27
  66:	e7 e8       	ldi	r30, 0x87	; 135
  68:	f3 e1       	ldi	r31, 0x13	; 19
  6a:	31 97       	sbiw	r30, 0x01	; 1
  6c:	f1 f7       	brne	.-4      	; 0x6a <__SREG__+0x2b>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <__SREG__+0x31>
  70:	00 00       	nop
	_delay_ms(20);
	PORTA=0;
  72:	1b ba       	out	0x1b, r1	; 27
  74:	e7 e8       	ldi	r30, 0x87	; 135
  76:	f3 e1       	ldi	r31, 0x13	; 19
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <__SREG__+0x39>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <__SREG__+0x3f>
  7e:	00 00       	nop
	_delay_ms(20);
	PORTA=0xff;
  80:	8b bb       	out	0x1b, r24	; 27
  82:	e7 e8       	ldi	r30, 0x87	; 135
  84:	f3 e1       	ldi	r31, 0x13	; 19
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <__SREG__+0x47>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <__SREG__+0x4d>
  8c:	00 00       	nop
	_delay_ms(20);
	PORTA=0;
  8e:	1b ba       	out	0x1b, r1	; 27
  90:	e7 e8       	ldi	r30, 0x87	; 135
  92:	f3 e1       	ldi	r31, 0x13	; 19
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <__SREG__+0x55>
  98:	00 c0       	rjmp	.+0      	; 0x9a <__SREG__+0x5b>
  9a:	00 00       	nop
	_delay_ms(20);
	PORTA=0xff;
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	e7 e8       	ldi	r30, 0x87	; 135
  a0:	f3 e1       	ldi	r31, 0x13	; 19
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <__SREG__+0x63>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <__SREG__+0x69>
  a8:	00 00       	nop
	_delay_ms(20);
	PORTA=0;
  aa:	1b ba       	out	0x1b, r1	; 27
  ac:	e7 e8       	ldi	r30, 0x87	; 135
  ae:	f3 e1       	ldi	r31, 0x13	; 19
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <__SREG__+0x71>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <__SREG__+0x77>
  b6:	00 00       	nop
	_delay_ms(20);
	PORTA=0xff;
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	e7 e8       	ldi	r30, 0x87	; 135
  bc:	f3 e1       	ldi	r31, 0x13	; 19
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <__SREG__+0x7f>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <__SREG__+0x85>
  c4:	00 00       	nop
	_delay_ms(20);
	PORTA=0;
  c6:	1b ba       	out	0x1b, r1	; 27
  c8:	e7 e8       	ldi	r30, 0x87	; 135
  ca:	f3 e1       	ldi	r31, 0x13	; 19
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <__SREG__+0x8d>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <__SREG__+0x93>
  d2:	00 00       	nop
	_delay_ms(20);
	PORTA=0xff;
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	87 e8       	ldi	r24, 0x87	; 135
  d8:	93 e1       	ldi	r25, 0x13	; 19
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <__SREG__+0x9b>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <__SREG__+0xa1>
  e0:	00 00       	nop
	_delay_ms(20);
	PORTA=0;
  e2:	1b ba       	out	0x1b, r1	; 27
  e4:	e7 e8       	ldi	r30, 0x87	; 135
  e6:	f3 e1       	ldi	r31, 0x13	; 19
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <__SREG__+0xa9>
  ec:	00 c0       	rjmp	.+0      	; 0xee <__SREG__+0xaf>
  ee:	00 00       	nop
	_delay_ms(20);
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:

int main(void)
{
	TIMSK1 |= (1<<TOIE1);//Разрешение на работу таймера.счётчика
 102:	8c b1       	in	r24, 0x0c	; 12
 104:	81 60       	ori	r24, 0x01	; 1
 106:	8c b9       	out	0x0c, r24	; 12
	TCCR1B |= (0<<CS12)|(0<<CS11)|(1<<CS10); //Работа без прескейлера
 108:	8e b5       	in	r24, 0x2e	; 46
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;//обнуляем таймер/счётчик
 10e:	1d bc       	out	0x2d, r1	; 45
 110:	1c bc       	out	0x2c, r1	; 44
	
	sei();//Глобально разрешаем прерывания
 112:	78 94       	sei
	
	DDRA=0xff;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8a bb       	out	0x1a, r24	; 26
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x16>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
